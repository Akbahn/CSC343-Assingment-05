#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>  
using namespace std;

struct Process {
    int pid;        // Process ID
    int at;         // Arrival Time
    int bt;         // Burst Time
    int wt;         // Waiting Time
    int tat;        // Turnaround Time
};

// Calculate times for FCFS
void calculateFCFS(vector<Process>& processes) {
    int currentTime = 0;
    cout << "----------------- FCFS -----------------\n";
    cout << "Process ID | Waiting Time | Turnaround Time\n";
    
    for(int i = 0; i < processes.size(); i++) {
        processes[i].wt = currentTime - processes[i].at;
        currentTime += processes[i].bt;
        processes[i].tat = currentTime - processes[i].at;
        
        cout << "    P" << processes[i].pid << "        |      " 
             << processes[i].wt << "         |        " 
             << processes[i].tat << "\n";
    }
    
    // Calculate and display average times
    float avgWT = 0, avgTAT = 0;
    for(auto p : processes) {
        avgWT += p.wt;
        avgTAT += p.tat;
    }
    avgWT /= processes.size();
    avgTAT /= processes.size();
    cout << "\nAverage Waiting Time: " << avgWT << endl;
    cout << "Average Turnaround Time: " << avgTAT << endl;
}

// Calculate times for SJF
void calculateSJF(vector<Process>& processes) {
    vector<Process> temp = processes;
    int currentTime = 0;
    int completed = 0;
    vector<bool> isCompleted(processes.size(), false);
    
    cout << "\n----------------- SJF -----------------\n";
    cout << "Process ID | Waiting Time | Turnaround Time\n";
    
    while(completed < processes.size()) {
        int minBT = INT_MAX;
        int minIdx = -1;
        
        // Minimum burst time among arrived processes
        for(int i = 0; i < processes.size(); i++) {
            if(!isCompleted[i] && processes[i].at <= currentTime && 
               processes[i].bt < minBT) {
                minBT = processes[i].bt;
                minIdx = i;
            }
        }
        
        temp[minIdx].wt = currentTime - temp[minIdx].at;
        currentTime += temp[minIdx].bt;
        temp[minIdx].tat = currentTime - temp[minIdx].at;
        isCompleted[minIdx] = true;
        completed++;
        
        cout << "    P" << temp[minIdx].pid << "        |      " 
             << temp[minIdx].wt << "         |        " 
             << temp[minIdx].tat << "\n";
    }
    
    // Calculate and display average times
    float avgWT = 0, avgTAT = 0;
    for(auto p : temp) {
        avgWT += p.wt;
        avgTAT += p.tat;
    }
    avgWT /= temp.size();
    avgTAT /= temp.size();
    cout << "\nAverage Waiting Time: " << avgWT << endl;
    cout << "Average Turnaround Time: " << avgTAT << endl;
}

int main() {
    // {PID, Arrival Time, Burst Time}
    vector<Process> processes = {
        {1, 0, 2},  // P1
        {2, 0, 1},  // P2
        {3, 0, 8},  // P3
        {4, 0, 4},  // P4
        {5, 0, 5}   // P5
    };
    
    calculateFCFS(processes);
    calculateSJF(processes);
    
    return 0;
}